#1.초기 화면
print ("                             ")
print ("                             ")
print ("　   ･✧ *ﾟ☁️｡　　\n   ☁   　 ･ ﾟ*｡･ﾟ\n   　　☁️･｡°*. ﾟ✧ ")
print ("┃                             ")
print ("┃단               ╬═══╬")
print ("┃ 곰              ╬═══╬   ")
print ("┃  이             ╬═══╬   ")
print ("┃   의            ╬═══╬   ")
print ("┃                 ╬═══╬      ")
print ("┃      단         ╬═══╬   ")
print ("┃       베        ╬═══╬   ")
print ("┃        레       ╬═══╬   ")
print ("┃         스      ╬═══╬   ")
print ("┃          트     ╬═══╬   ")
print ("┃                 ╬═══╬    ")
print ("┃            오   ╬═══╬ ")
print ("┃             르  ╬═══╬ ")
print ("┃              기 ╬═══╬\n┃")
print ("┃              G A M E")
print (" ━━━━━━━━━━━━\n\n")

print ("게임시작을 원하시면 엔터를 눌러주세요!")
input ()        #엔터를 입력하면 다음 코드가 진행됩니다. 
print ("                     \n\n")


#2.게임스토리 설명
print ("━━━━━━━━━━━━━━━━━━━━━━━━━━")
print ("[단곰]- 안녕! 나는 단곰이야!")
print('[단곰]- 평화의 광장에 계시는 엄마를 찾으러 가야 하는데...\n        곰상까지 가려면 이 단베레스트를 올라야 해!!\n')
print('[단곰]- 나를 도와줄 수 있겠니?\n\n')


#3. 게임방법 확인 및 닉네임 설정

    #닉네임 함수 정의

def nickname():
    
    global name   #닉네임으로 입력한 값을 함수 밖에서도 활용하기 위해 전역변수로 설정.
    name = input("\n\n━━━━━━━━━━━━━━━━━━━━━━━━━━""\n[단곰]- 너의 이름을 알고싶어!""\n\n단곰이에게 닉네임을 알려주세요.")
    

    if len(name) < 1:       #닉네임란에 아무것도 입력하지 않았을 경우
        print("한 글자 이상 입력해주세요.")
        return False        #False로 재진행.

    else:
        print("\n[단곰]- 잘 부탁해!" + name,'\n')    #닉네임란에 입력했을 경우, 단곰이의 대사에 닉네임 노출됨.
        return True



    #메뉴 함수 정의 및 닉네임 함수 호출
def print_menu():
    print('☁‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑')
    print('   1. 도움말 보기')
    print('   2. 게임 시작하기')
    print('☁‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑‑')
    inputed_number = int(input("\n\n숫자를 입력하세요:"))   #변수에 숫자 입력한 값을 저장합니다. 

    if inputed_number == 1:                              #숫자 입력 값이 1일때, (도움말 보기) 
        print('\n\n게임 방법:\n\n① 게임 시작 후 처음으로 이동할 계단 수는 <숫자 뽑기>로 정한다. 이때 1~4 중 랜덤 숫자가 부여된다.\n')
        print('② 미니게임을 통해 계단을 뒤로 또는 앞으로 이동할 수 있다.\n')
        print('③ 미니게임 결과 이동할 칸이 0일때 혹은 이동한 칸에 게임이 존재하지 않을 때는 <숫자 뽑기>로 칸을 이동할 수 있다.\n')
        print('④ 목표 달성 성공/실패 시 모두 게임을 종료하거나 재시도 할 수 있다.\n\n')
        print_menu()                                     #도움말 확인 후 메뉴함수를 다시 호출합니다.


    elif inputed_number == 2:                            #숫자 입력 값이 2일때, (게임시작하기)

        while True:                                      #닉네임 함수를 호출하고,True값이 나올때까지 반복합니다.
            if nickname():
                break

            
print_menu()    #메뉴 함수를 실행합니다. 메뉴 함수 내용에 따라 닉네임 함수가 이어집니다. 

   
   



#4. 게임 시작

print ('\n\n•──────────────────────────•°•❀•°•─────────────────────────•\n')
print ('                    M  I  S  S  I  O  N                        \n')
print ('    ',name,', 단곰이가 단베레스트를 오르는 것을 도와주세요!')    #닉네임 함수에서 설정했던 전역변수 name이 활용됩니다. 
print ('       계단은 총 24개. \n       8, 11, 16, 20번째 계단에서 이벤트가 발생합니다.')
print ('       13번째 계단은 함정이니 조심하세요!')
print (' \n\n        <목표>: 곰상이 있는 24번째 계단에 정확히 도착하자!\n')
print ('•──────────────────────────•°•❀•°•─────────────────────────•\n\n\n\n')


print ('\n   ★ S T A I R S - M A P ★')
print ('\n    [1] [2] [3] [4] [5] [6] [7] [범] [9] [10] [사] [12] [폭] [14] [15] [혜] [17] [18] [19] [도] [21] [22] [23] [24] [?]')


print (' \n\n현재위치: [★] [2] [3] [4] [5] [6] [7] [범] [9] [10] [사] [12] [폭] [14] [15] [혜] [17] [18] [19] [도] [21] [22] [23] [24] [?]')

#5. 이동하기 코드
import random


p = 1                      #현재위치 초기값인  1을  변수 p에 저장합니다. 

while p <= 24:             #while문으로 24에 도달할때까지 반복합니다. 
    print('-------------------------------\n현재위치:', p, '번째 계단')   #이동할때마다 현재위치를 반복적으로 알려줍니다. 

    if p == 24:            #정확히 24에 도달했을때의 조건문

        print (' \n현재위치: [1] [2] [3] [4] [5] [6] [7] [범] [9] [10] [사] [12] [폭] [14] [15] [혜] [17] [18] [19] [도] [21] [22] [23] [★] [?]\n')
        print ("\n [단곰]- 우와! 이곳이『평화의 광장』이구나! ")
        print(' [단곰]- 평화의 광장 중앙에 곰상이 있네!!')
        print(' [단곰]- 엄마를 찾았다!! \n')
        print('.    +*.｡ﾟ ･*･:*:｡*+。*｡:ﾟ+')

        print('-------------------------------')
        print(" 단곰이는 성공적으로 곰상에 도착했고")
        print(" 엄마를 찾았습니다!")
        print('\n [단곰]- 엄마랑 다시 만나게 해줘서 고마워 ㅎㅎ ')
        print('\n\n•────────────────────• S U C C E S S •───────────────────•')
        print('\n ↳ 축하합니다.''\n ↳ 게임이 15초 후 자동으로 종료됩니다.')  #게임이 성공적으로 종료됩니다.


        #시간차를 두고 종료하기 위해 time 모듈 생성
        import time

        start = 15     #15초 후 종료

        def timer(t):
            while t>0:
                print('▶', t,'초', end='\r ')  #덮어쓰기
                t = t-1
                time.sleep(1)

        timer(start)
        break
        
    
        
#5-1. 미니게임 <가위바위보> 코드
    if p == 8:          #8번째 계단에 도착하면 범정관을 배경으로 가위바위보 게임이 진행됩니다.
        print (' \n현재위치: [1] [2] [3] [4] [5] [6] [7] [★] [9] [10] [사] [12] [폭] [14] [15] [혜] [17] [18] [19] [도] [21] [22] [23] [24] [?]\n')
        print("\n┏━━━━━━━━━━━━━━━━━━━━━━━━━━━┓")
        print("┃『범정관』에 도착했습니다. ┃")
        print("┃ 이벤트가 진행됩니다.　　  ┃")
        print("┗━━━━━━━━━━━━━━━━━━━━━━━━━━━┛\n")
        print(' [단곰]- 범정관은 대학 본부가 있는 곳이래~')  #단곰이의 대사로 범정관에 대해 소개합니다.
        print(' [단곰]- 우리학교 중앙에 아주 근엄하게 자리하고 있지 않아? \n\n')
        print(' ↳ 미니게임 <가위바위보>를 시작합니다.')



        import random

        # 가위, 바위, 보를 리스트에 올리기
        sel = ['가위', '바위', '보']
        # 가위바위보 결과 문구
        result = {0: ' 가위바위보에서 <승리>했습니다. \n  ↳ 단곰이가 <두 칸 앞으로> 이동합니다.',
          1: '  ↳ 가위바위보에서 <패배>했습니다. \n  ↳ 단곰이가 <두 칸 뒤로> 이동합니다.',
          2: '  ↳ 가위바위보에서 <비겼>습니다. \n  ↳ 단곰이는 이동하지 않습니다.'}

        # 가위바위보 소스
        def checkWin(user, com):
            global p                 #가위바위보 결과값을 저장할 p를 전역변수로 설정합니다. 
            if not user in sel:
                print('잘못 입력하였습니다. 다시 입력하세요.') # 잘못 입력한 경우
                return False

            p = 8                    #현재 위치는 8임을 새로운 함수 내에서 변수로 정의.

            
            print(f'\n[사용자 ( {user} vs {com} ) 게임]')# 가위바위보 경우의 수
            if user == com:                             # 가위바위보를 비길 경우
                state = 2
                print(result[state])
                move = p + 0                          #추가이동을 설명할 변수 move
                print('\n-------------------------------\n현재위치:', move, '번째 계단')  #추가이동 후 위치
            elif user == '가위' and com == '바위':      # 가위바위보를 패배할 경우
                state = 1
                print(result[state])
                move = p - 2                          #추가이동을 설명할 변수 move
                print('\n-------------------------------\n현재위치:', move, '번째 계단')  #추가이동 후 위치
            elif user == '바위' and com == '보':
                state = 1
                print(result[state])
                move = p - 2                          #추가이동을 설명할 변수 move
                print('\n-------------------------------\n현재위치:', move, '번째 계단')   #추가이동 후 위치
            elif user == '보' and com == '가위':       
                state = 1
                print(result[state])
                move = p - 2                         #추가이동을 설명할 변수 move
                print('\n-------------------------------\n현재위치:', move, '번째 계단')  #추가이동 후 위치
            else:                                       # 가위바위보의 나머지 경우(이길 경우)
                state = 0
                print(result[state])
                move = p + 2                         #추가이동을 설명할 변수 move
                print('\n-------------------------------\n현재위치:', move, '번째 계단')  #추가이동 후 위치

            p = move                              #전역변수 p에 이동한 결과값이 저장되어 본게임 이동 결과에 반영됩니다. 

            return True

        while True:                                  # 가위바위보 과정 문구
            user = input("\n 가위, 바위, 보 중 선택해주세요: ")     # 가위, 바위, 보 중 무엇을 낼 것인지 물어보기
            com = sel[random.randint(0, 2)]          # 가위, 바위, 보 중 랜덤으로 설정
            if checkWin(user, com):
                break


    
#5-2. 미니게임 <홀짝 맞추기> 코드

    if p == 11:          #11번째 계단에 도착하면 사회과학관을 배경으로 홀짝 게임이 진행됩니다.
        print (' \n현재위치: [1] [2] [3] [4] [5] [6] [7] [범] [9] [10] [★] [12] [폭] [14] [15] [혜] [17] [18] [19] [도] [21] [22] [23] [24] [?]\n')

        print("\n┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓")
        print("┃『사회과학관』에 도착했습니다.┃")
        print("┃ 이벤트가 진행됩니다.　　 　　┃")
        print("┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛")


        print(' [단곰]- 사회과학관은 사회과학대학 소속 학생들이 공부하는 곳이야!')  #단곰이의 대사로 사회과학관에 대해 소개합니다.
        print(' [단곰]- 정치외교학과, 행정학과, 도시계획부동산학부가 주로 사용해!\n')
        print('↳ 미니게임 <홀짝 맞추기>를 시작합니다.')
        print('\n‣ 게임은 2~30중 하나의 숫자를 제시합니다.\n‣ 게임이 고른 숫자가 <홀>일지, <짝>일지 맞춰주세요!')


        import random

        #홀짝 결과 문구
        result = {0: ' 홀짝 맞추기에서 <승리>했습니다. \n\n단곰이가 <한 칸 앞으로> 이동합니다.',
                  1: ' 홀짝 맞추기에서 <패배>했습니다. \n\n단곰이가 <한 칸 뒤로> 이동합니다.'}


        #홀짝 함수 설정
        def holzzack():
            global p

            # 홀짝 결과 화면 보여주기
            N = random.randint(2,30)                  # 2에서 30까지 랜덤으로 숫자가 나옴.
            user = int(input("\n  [홀(0), 짝(1)]\n 숫자를 입력해주세요 :"))      # 유저가 홀인지 짝인지 선택(맞추기).
            print("\n 정답 : {}".format(N), end=' / ')    # 정답은 몇인지, 정답 유무를 알려줌.

            p = 11     #현재 위치가 11임을 함수 내에 다시 명시함. 

            if user:
                if N % 2:                                #나머지 값에 따라 홀짝을 판명합니다. 
                    print("틀렸습니다.")
                    state = 1                            #앞서 설정한 결과문구를 출력합니다. 
                    print(result[state])
                    move = p - 1                         #추가이동을 설명할 변수 move
                    print('\n-------------------------------\n현재위치:', move, '번째 계단')
                else:
                    print("맞았습니다.")
                    state = 0
                    print(result[state])
                    move = p + 1                         #추가이동을 설명할 변수 move
                    print('\n-------------------------------\n현재위치:', move, '번째 계단')

            else:
                if N % 2:                                #나머지 값에 따라 홀짝을 판명합니다. 
                    print("맞았습니다.")
                    state = 0                            #앞서 설정한 결과문구를 출력합니다. 
                    print(result[state])
                    move = p + 1                         #추가이동을 설명할 변수 move
                    print('\n-------------------------------\n현재위치:', move, '번째 계단')
                else:
                    print("틀렸습니다.")
                    state = 1                            #앞서 설정한 결과문구를 출력합니다. 
                    print(result[state])
                    move = p - 1                         #추가이동을 설명할 변수 move
                    print('\n-------------------------------\n현재위치:', move, '번째 계단')

            p = move      #추가이동으로 move에 저장된 값이 p에 새로 저장됩니다. 


       #홀짝 함수 호출
        holzzack()        


#5-3. 13번째 칸에서 발동되는 <함정> 코드
        
    if p == 13:         #13번째 칸에 도착하면 폭포공원을 배경으로 함정이 발동됩니다.
        print (' \n현재위치: [1] [2] [3] [4] [5] [6] [7] [범] [9] [10] [사] [12] [★] [14] [15] [혜] [17] [18] [19] [도] [21] [22] [23] [24] [?]\n')

        print('-------------------------------')
        print("\n 어랏? 단곰이가『폭포공원』에 도착했습니다.\n 저런, 함정에 걸려 나오지 못하겠군요..")
        print(' [단곰]- 우와~ 폭포공원이 너무 예쁘다~~ ')
        print(' 단곰이는 폭포공원 정자 위에서 잠들고 말았습니다.')
        print('\n\n•────────────────• G A M E O V E R •───────────────•')
        print(' 안타깝게도 단곰이는 엄마를 찾지 못했습니다.''\n 게임이 10초 후 자동으로 종료됩니다.')


        #시간차를 두고 종료하기 위해 time 모듈 생성
        import time

        start = 10     #10초 후 종료

        def timer(t):
            while t>0:
                print('▶', t,'초', end='\r ')  #덮어쓰기
                t = t-1
                time.sleep(1)

        timer(start)
        break


#5-4. 16번째 칸에서 진행되는 <퀴즈> 코드
    if p == 16:          #16번째 계단에 도착하면 혜당관을 배경으로 퀴즈게임이 진행됩니다.
        print (' \n현재위치: [1] [2] [3] [4] [5] [6] [7] [범] [9] [10] [사] [12] [폭] [14] [15] [★] [17] [18] [19] [도] [21] [22] [23] [24] [?]\n')
        print("\n┏━━━━━━━━━━━━━━━━━━━━━━━━━━━┓")
        print("┃『혜당관』에 도착했습니다. ┃")
        print("┃ 이벤트가 진행됩니다.　　  ┃")
        print("┗━━━━━━━━━━━━━━━━━━━━━━━━━━━┛\n")
        
        print(' [단곰]- 혜당관은 학생들의 건물, 학생회관이야!')  #단곰이의 대사로 혜당관에 대해 소개합니다.
        print(' [단곰]- 동아리도 하고, 학식도 먹고, 전공책도 살 수 있어~\n')

        print(' ↳ 미니게임 <단국대학교 퀴즈>를 시작합니다.')
        

        # 퀴즈 선다 리스트 만들기
        word = [ '백범 김구', '범정 장형', '혜당 조희재', '우남 이승만']

        # 퀴즈 결과 문구
        result = {0: '\n 정답입니다. 단곰이가 <세 칸 앞으로> 이동합니다.',
                  1: '\n 오답입니다. 단곰이가 <세 칸 뒤로> 이동합니다.',}

        # 퀴즈 함수 설정
        def quiz(user):
            global p  #미니게임에서 결정된 새로운 변수 p를 본게임에 반영하기 위해 전역변수로 설정합니다. 

            if not user in word:
                print('잘못 입력하였습니다. 다시 입력하세요.')
                return False                                 #선다리스트에 없는 코드를 입력한 경우 다시 입력할 수 있습니다. 

            if user == '범정 장형':              #정답을 정확히 입력했을때의 경우
                state = 0                        #미리 설정한 result의 상태 0이 된다. 
                print(result[state])             #result의 내용을 출력한다. 
                move = p + 3                          #추가이동을 설명할 변수 move
                print('\n-------------------------------\n현재위치:', move, '번째 계단')  #추가이동 후 위치
                

            else:                               #정답 외의 것들을 입력했을 때의 경우
                state = 1                       #미리 설정한 result의 상태 1이 된다. 
                print(result[state])            #result의 내용을 출력한다.              
                move = p - 3                          #추가이동을 설명할 변수 move
                print('\n-------------------------------\n현재위치:', move, '번째 계단')  #추가이동 후 위치
                

            p = move           #global p로 설정되어 본게임 이동 결과에 반영됩니다

            return True
        

        while True:             #현재 위치가 16이 되었을때, 문제를 제출하고 정답을 받습니다. 
            print("\n○문제: 단국대학교의 설립자는 누구인가요?")
            print(word)
            user = input("○정답: ")
            if quiz(user):
                break           #While True문을 종료합니다. 


#5-5. 20번째 칸에서 진행되는 <가위바위보> 코드

    if p == 20:    #20번째 계단에 도착하면 도서관을 배경으로 가위바위보 게임이 진행됩니다.
        print (' \n현재위치: [1] [2] [3] [4] [5] [6] [7] [범] [9] [10] [사] [12] [폭] [14] [15] [혜] [17] [18] [19] [★] [21] [22] [23] [24] [?]\n')
        print("\n┏━━━━━━━━━━━━━━━━━━━━━━━━━━━┓")
        print("┃『도서관』에 도착했습니다. ┃")
        print("┃ 이벤트가 진행됩니다.　　  ┃")
        print("┗━━━━━━━━━━━━━━━━━━━━━━━━━━━┛\n")
        print(' [단곰]- 도서관이 정말 크지? 책도 정말 많을 것 같아~')
        print(' [단곰]- 멋진 도산라운지에서 친구들과 공부하고, 스터디룸도 빌릴 수 있대~')
        print(' [단곰]- 다음에 나랑 공부하러 가자!\n')  #단곰이의 대사로 도서관에 대해 소개합니다. 
        print(' ↳ 미니게임 <가위바위보>를 시작합니다.')

        import random

        # 가위, 바위, 보를 리스트에 올리기
        sel = ['가위', '바위', '보']
        # 가위바위보 결과 문구
        result = {0: '  ↳ 가위바위보에서 <승리>했습니다. \n  ↳ 단곰이가 <두 칸 앞으로> 이동합니다.',
          1: '  ↳ 가위바위보에서 <패배>했습니다. \n  ↳ 단곰이가 <두 칸 뒤로> 이동합니다.',
          2: '  ↳ 가위바위보에서 <비겼>습니다. \n  ↳ 단곰이는 이동하지 않습니다.'}

        # 가위바위보 소스
        def checkWin(user, com):
            global p                                        #가위바위보 결과값을 새로운 p 전역변수로 설정해서 본게임에 적용합니다. 
            if not user in sel:
                print('잘못 입력하였습니다. 다시 입력하세요.') # 잘못 입력한 경우
                return False

            p = 20    #현재 위치는 20임을 새로운 함수 내에서 변수로 정의.
            
            print(f'\n[사용자 ( {user} vs {com} ) 게임]') # 가위바위보 경우의 수
            if user == com:                             # 가위바위보를 비길 경우
                state = 2
                print(result[state])
                move = p + 0                          #추가이동을 설명할 변수 move
                print('\n-------------------------------\n현재위치:', move, '번째 계단')  #추가이동 후 위치
            elif user == '가위' and com == '바위':      # 가위바위보를 패배할 경우
                state = 1
                print(result[state])
                move = p - 2                          #추가이동을 설명할 변수 move
                print('\n-------------------------------\n현재위치:', move, '번째 계단')  #추가이동 후 위치
            elif user == '바위' and com == '보':
                state = 1
                print(result[state])
                move = p - 2                          #추가이동을 설명할 변수 move
                print('\n-------------------------------\n현재위치:', move, '번째 계단')   #추가이동 후 위치
            elif user == '보' and com == '가위':       
                state = 1
                print(result[state])
                move = p - 2                         #추가이동을 설명할 변수 move
                print('\n-------------------------------\n현재위치:', move, '번째 계단')  #추가이동 후 위치
            else:                                       # 가위바위보의 나머지 경우(이길 경우)
                state = 0
                print(result[state])
                move = p + 2                         #추가이동을 설명할 변수 move
                print('\n현재위치:', move, '번째 계단')  #추가이동 후 위치

            p = move                              #global p로 설정되어 본게임 이동 결과에 반영됩니다. 

            return True
        while True:                                  # 가위바위보 과정 문구
            user = input("\n 가위, 바위, 보 중 선택해주세요: ")        # 가위, 바위, 보 중 무엇을 낼 것인지 물어보기
            com = sel[random.randint(0, 2)]          # 가위, 바위, 보 중 랜덤으로 설정
            if checkWin(user, com):
                break                                #While True문을 종료합니다.  



#6. 본게임 진행 과정 

    print('\n▶(엔터)를 눌러 숫자카드를 뽑습니다.')
    input()                                         #사용자가 엔터를 누르면 다음 코드가 진행됩니다.

    n = random.randint(1, 4)                        #변수 n에 1~4 중 랜덤의 숫자가 지정됩니다. 
    print('단곰이는', '<', n, '>', "칸 이동합니다.\n\n") #랜덤 숫자를 사용자에게 알려줍니다. 
    p = p + n                                       #5단계에서 p(현재위치)는 1로 설정했었고, 랜덤의 숫자 n이 이에 더해지는 값이 새로운 p로 지정됩니다. 

    if p > 24:                                      #게임의 결과에 p(현재위치)가 24를 초과하면 게임이 오버됩니다.
        print (' \n현재위치: [1] [2] [3] [4] [5] [6] [7] [범] [9] [10] [사] [12] [폭] [14] [15] [혜] [17] [18] [19] [도] [21] [22] [23] [24] [★]\n')
        
        print('-------------------------------')
        print('━━━━━┓')
        print('┓┓┓┓┓┃')
        print('┓┓┓┓┓┃')
        print('┓┓┓┓┓┃　 ┎━━━━━━┒')
        print('┓┓┓┓┓┃ 　┃┏┓┏┓┏┓┃')
        print('┓┓┓┓┓┃　 ┃┗┛┗┛┗┛┃')
        print('┓┓┓┓┓┃　 ┃┏┓┏┓┏┓┃')

        print("\n 어랏? 단곰이가『보정동 카페거리』에 도착했습니다.\n 저런, 엄마가 있는 곰상에 도착하지 못했군요.")
        print(' [단곰]- 여긴 어디지..? 엄마는 어디계신거지? ')
        print(' 단곰이는 길을 잃었습니다.')
        print('\n\n•────────────────• G A M E O V E R •───────────────•')
        print(' 안타깝게도 단곰이는 엄마를 찾지 못했습니다.''\n 게임이 10초 후 자동으로 종료됩니다.')


        #시간차를 두고 종료하기 위해 time 모듈 생성
        import time

        start = 10     #10초 후 종료

        def timer(t):
            while t>0:
                print('▶', t,'초', end='\r ')  #덮어쓰기
                t = t-1
                time.sleep(1)

        timer(start)
        break
